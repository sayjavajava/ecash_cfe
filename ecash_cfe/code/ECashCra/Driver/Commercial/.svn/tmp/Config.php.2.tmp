<?php

class ECashCra_Driver_Commercial_Config
{

	protected $updateable_statuses = array(
		'sent::external_collections::*root',
		'recovered::external_collections::*root',
		'paid::customer::*root',
		'chargeoff::collections::customer::*root',
	);
	protected $cancellation_statuses = array(
		'withdrawn::applicant::*root',
		'denied::applicant::*root',
		'declined::prospect::*root',
		'disagree::prospect::*root',
		'funding_failed::servicing::customer::*root',
		'canceled::applicant::*root'
	);
	protected $prefund_statuses = array(
		'approved::servicing::customer::*root'
	);
	
	protected $active_status = 'active::servicing::customer::*root';
	
	protected $withdrawn_status = 'withdrawn::applicant::*root';
	
	protected function setupCompanyDatabaseConfigs()
	{
<<<<<<< .mine
		return array(
			'mls'   => new DB_MySQLConfig_1('writer.mysql-staging.atlas-lms.com', 'ecash', 'Hook6Zoh', 'ldb_mls'),
		);
=======
>>>>>>> .r5140
	}
	
	protected function setupCompanyCredentials()
	{
	}
	
	////
	// END OF CONFIGURATION
	////
	
	protected $api_credentials;
	
	/**
	 * @var array
	 */
	protected $db_configs;
	
	/**
	 * @var string
	 */
	protected $company;
	
	protected $mode;
	
	public function __construct()
	{
		$this->db_configs = $this->setupCompanyDatabaseConfigs();
		$this->api_credentials = $this->setupCompanyCredentials();
		
		if (is_array($this->db_configs)) foreach ($this->db_configs as $alias => $config)
		{
			DB_DatabaseConfigPool_1::add($alias, $config);
		}
	}
	
	public function useArguments(array $arguments)
	{
		$company = array_shift($arguments);
		
		$this->company = $company;
		
		$mode = array_shift($arguments);
		
		$this->mode = $_ENV['ECASH_MODE'] = $mode;
	}
	
	public function setArguments()
	{
error_log(print_r(ECash::getConfig(),true));
		$config = ECash::getConfig();
		$this->db_configs = array(
			strtolower($config->COMPANY_NAME_SHORT) => new DB_MySQLConfig_1($config->CRA_DB_HOST, $config->CRA_DB_USER, $config->CRA_DB_PASS, $config->CRA_DB_NAME),
		);
		$this->api_credentials = array(
			strtolower($config->COMPANY_NAME_SHORT) => $config->COMPANY_CRA_SETTINGS
		);

		if (is_array($this->db_configs)) foreach ($this->db_configs as $alias => $config)
		{
			DB_DatabaseConfigPool_1::add($alias, $config);
		}
		
		if (empty($this->db_configs[$this->company]))
		{
			throw new InvalidArgumentException('The specified company is not set up');
		}

	}
	
	public function getApiConfig($cra_source, $item)
	{
		return $this->api_credentials[$this->company][$cra_source][$item];
	}
	
	public function getCompany()
	{
		return $this->company;
	}
	
	public function getConnection()
	{
		return DB_DatabaseConfigPool_1::getConnection($this->company);
	}
	
	public function getWithdrawnStatus()
	{
		return $this->withdrawn_status;
	}
	
	public function getActiveStatus()
	{
		return $this->active_status;
	}
	
	public function getUpdateableStatuses()
	{
		return $this->updateable_statuses;
	}

	public function getCancellationStatuses()
	{
	    return $this->cancellation_statuses;
	}
	
	public function getPrefundStatuses()
	{
	    return $this->prefund_statuses;
	}

}

?>
